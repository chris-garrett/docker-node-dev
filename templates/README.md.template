# ${IMAGE_NAME}

* Node development image

Node image for rapid client/server development. This image is *NOT* meant for production!

## Versions / packages
* chrisgarrett/node:${IMAGE_VERSION} -> (node:${IMAGE_VERSION}-alpine)
* cross-env
* feathers-cli
* sequelize-cli

## Usage

### Standalone app:

Assumes that `app` is the directory that contains your package.json.
```
docker run --rm \
      -v `pwd`/examples/links/app:/work/app \
      ${IMAGE_NAME}:${IMAGE_VERSION} \
      npm start
```

### App + libraries

When the container loads any folders mouned in `/work/libs` will automatically
be linked `npm link` to your app. Again, this assumes that each subfolder
contains a package.json file. For an example see `examples/links`.

1. Start your library project first
```
docker run --rm \
      -v `pwd`/examples/links/libs/mylib1:/work/app \
      ${IMAGE_NAME}:${IMAGE_VERSION} \
      npm start
```

1. Next start your application mounting your library project
```
docker run --rm \
      -v `pwd`/examples/links/app:/work/app \
      -v `pwd`/examples/links/libs/mylib1:/work/libs/mylib1 \
      ${IMAGE_NAME}:${IMAGE_VERSION} \
      npm start
```

#### Docker Compose

Here is an example compose file:

```
version: '2'
services:

  app:
    container_name: links_app
    image: ${IMAGE_NAME}:6.9.1
    command: npm start
    ports:
    - 3000:3000
    volumes:
    - ./examples/links/app:/work/app
    - ./examples/links/libs/mylib1:/work/libs/mylib1
    depends_on:
    - mylib1

  mylib1:
    container_name: links_lib1
    image: ${IMAGE_NAME}:6.9.1
    command: npm start
    volumes:
    - ./examples/links/libs/mylib1:/work/app
```

Run with:
```
docker-compose -p links up
```



## Credits
